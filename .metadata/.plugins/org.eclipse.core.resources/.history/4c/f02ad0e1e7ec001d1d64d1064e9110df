/*
 * STM_Interrupt.c
 *
 *  Created on: May 7, 2023
 *      Author: Umaar
 */

#include "STM_Interrupt.h"
#include "Bsp.h"
#include "IfxPort.h"
#include "IfxStm.h"

#define ISR_PRIORITY_STM        40                              /* Priority for interrupt ISR                       */
#define TIMER_INT_TIME          1                               /* Time between interrupts in us                    */

#define STM                     &MODULE_STM0                    /* STM0 is used in this example                     */

IfxStm_CompareConfig g_STMConf;                                 /* STM configuration structure                      */
Ifx_TickTime g_ticksFor1us;                                     /* Variable to store the number of ticks to wait    */
int timeElapsed;

void initSTM(void);

IFX_INTERRUPT(isrSTM, 0, ISR_PRIORITY_STM);

void isrSTM(void)
{
    /* Update the compare register value that will trigger the next interrupt and toggle the LED */
    IfxStm_increaseCompare(STM, g_STMConf.comparator, g_ticksFor1us);
}

/* Function to initialize the STM */
void initSTM(void)
{
    IfxStm_initCompareConfig(&g_STMConf);           /* Initialize the configuration structure with default values   */

    g_STMConf.triggerPriority = ISR_PRIORITY_STM;   /* Set the priority of the interrupt                            */
    g_STMConf.typeOfService = IfxSrc_Tos_cpu0;      /* Set the service provider for the interrupts                  */
    g_STMConf.ticks = g_ticksFor1us;                /* Set the number of ticks after which the timer triggers an
                                                     * interrupt for the first time                                 */
    IfxStm_initCompare(STM, &g_STMConf);            /* Initialize the STM with the user configuration               */
}

/* Function to initialize all the peripherals and variables used */
void startTimer_STM0(void)
{
    /* Initialize time constant */
    g_ticksFor1us = IfxStm_getTicksFromMicroseconds(BSP_DEFAULT_TIMER, TIMER_INT_TIME);
    timeElapsed = 0;                                /* Initialize with 0 */

    initSTM();                                      /* Configure the STM module                                     */
}

void stopTimer_STM0(void){
    IfxStm_disableModule(STM);
}

int getTimeElapsed_in_us_STM0(void){
    return timeElapsed;
}
