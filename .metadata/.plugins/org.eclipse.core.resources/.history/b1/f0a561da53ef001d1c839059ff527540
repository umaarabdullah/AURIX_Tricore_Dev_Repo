/*
 * SONAR.c
 *
 *  Created on: May 7, 2023
 *      Author: Umaar
 */

#include <stdio.h>
#include "IfxPort.h"
#include "IfxGtm_Tom_Timer.h"

#define TRIG_PIN    &MODULE_P14,0      /* Echo Pin 22 */
#define ECHO_PIN    &MODULE_P14,1      /* Trig Pin 23 */
#define SPEED_OF_SOUND  34300   // speed of sound in cm/s

// Function to generate a trigger pulse on the HC-SR04 Trig pin
void sendTriggerPulse()
{
    // Set Trig pin high for at least 10 microseconds
    IfxPort_setPinHigh(TRIG_PIN);
    IfxGtm_Tom_Timer_delay(TimeConst_10us);
    IfxPort_setPinLow(TRIG_PIN);
}

// Function to measure the duration of the echo pulse on the HC-SR04 Echo pin
uint32 measureEchoPulse()
{
    Ifx_TickTime startTime, endTime;
    uint32 duration;

    // Wait for the Echo pin to go high
    while(!IfxPort_getPinState(ECHO_PIN));

    // Get the start time of the pulse
    startTime = IfxStm_get(IfxStm_0);

    // Wait for the Echo pin to go low
    while(IfxPort_getPinState(ECHO_PIN));

    // Get the end time of the pulse
    endTime = IfxStm_get(IfxStm_0);

    // Calculate the duration of the pulse in microseconds
    duration = (endTime - startTime) * (1000000/IfxStm_getFrequency());

    return duration;
}

//#include "IfxPort.h"
//#include "Bsp.h"
//#include "STM_Interrupt.h"
//#include "UART.h"
//
//#define ECHO         &MODULE_P14,0      /* Echo Pin 22 */
//#define TRIG         &MODULE_P14,1      /* Trig Pin 23 */
//
//#define PULSE_TIME   10                 /* 10us */
//#define Speed_of_Sound 343              /* Speed of sound m/s */
//
//int distance;                           /* Unit: Meter */
//int elapsed_time;                       /* Unit: Seconds */
//
//void SEND_PULSE(void);
//
//void SONAR_INIT(void){
//    IfxPort_setPinModeOutput(TRIG, IfxPort_OutputMode_pushPull, IfxPort_OutputIdx_general);
//    IfxPort_setPinModeInput(ECHO, IfxPort_Mode_inputPullDown);      // a pull-down resistor to maintain a logic low by default
//}
//
///* set the Trig pin high for at least 10 microseconds, and then set it low again. */
//void SEND_PULSE(void){
//    Ifx_TickTime pulse_ticks = IfxStm_getTicksFromMicroseconds(BSP_DEFAULT_TIMER, PULSE_TIME);
//
//    IfxPort_setPinLow(TRIG);    // Set Trig pin low
//    waitTime(pulse_ticks);      // Wait for 10 microseconds
//    IfxPort_setPinHigh(TRIG);   // Set Trig pin High
//    waitTime(pulse_ticks);      // Wait for 10 microseconds
//    IfxPort_setPinLow(TRIG);    // Set Trig pin low
//}
//
///* Function to measure the distance to an object using the HC-SR04 */
//int SONAR_MEASURE_DISTANCE(void){
//
//    int timeout = 1000000;  // Timeout in microseconds
//    unsigned int start_time, end_time;
//
//    // Send a pulse to the HC-SR04
//    SEND_PULSE();
//
//    // Wait pulseIn i.e for the Echo pin to go high
//    while (!IfxPort_getPinState(ECHO) && timeout > 0) {
//        timeout--;
//    }
//
//    // Start timer
//    start_time = getTicks();
//
//    // Wait for the Echo pin to go low
//    while (IfxPort_getPinState(ECHO) && timeout > 0) {
//        timeout--;
//    }
//
//    // Stop timer and calculate elapsed time
//    end_time = getTicks();
//    elapsed_time = (end_time - start_time)/1000000;     // not 100% accurate need to account for cycle time
//
//    IfxStdIf_DPipe_print(&g_ascStandardInterface, "\n\rElapsed Time: %d\n\r",elapsed_time);
//
//    // Calculate distance from elapsed time
//    distance = ((elapsed_time * Speed_of_Sound) / 2)*100;
//
//    return distance;
//}
//
//
//
